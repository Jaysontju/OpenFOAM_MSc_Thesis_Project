These are basically small pieces of code that are being executed at every time-step without 
explizitly being linked to the application. 

A functionObject is added to a solver by adding a functions entry in system/controlDictls


To find all of the examples of Function Objects being used in the standard OpenFOAM tutorials, 
run the following command to get a list of tutorial cases that used them: 
find $FOAM_TUTORIALS -name controlDict | xargs grep 'functions' -sl
grep -r functionObjectLibs $FOAM_TUTORIALS

The implementations can be found in
$FOAM_SRC/postProcessing/functionObjects

//https://github.com/OpenFOAM/OpenFOAM-2.3.x/blob/master/src/postProcessing/functionObjects/field/fieldMinMax/fieldMinMax.H

Examples
/*..........................................................................................*/

execFlowFunctionObjects -help
execFlowFunctionObjects -noFlow
execFlowFunctionObjects -latestTime

libs (
    "libgroovyBC.so"
    "libfieldFunctionObjects.so"
    "libOpenFOAM.so"
);

functions
{
    fieldAverage
    {
        type                fieldAverage;
        functionObjectLibs  ("libfieldFunctionObjects.so");
        //region              defaultRegion; //name of region for multi-region cases
        enabled             yes; //on/off switch
        //timeStart           0; //start time
        //timeEnd             10; //end time
        outputControl       timeStep; //when to output: either 'outputTime' or 'timeStep'
        outputInterval      1; //steps between output when outputControl=timeStep

        //resetOnRestart true; //restart the averaging process with the new time
        //resetOnOutput false; //restart the averaging process after each calculation output time

        fields
        (
            T
            {
                mean        on;   //arithmetic mean
                prime2Mean  on;   //prime-squared mean
                base        time; //average over 'time', or 'iteration'
            }
        );
    }
    
    minMax
    {
        type            fieldMinMax;
        functionObjectLibs ( "libfieldFunctionObjects.so" );
        //region              defaultRegion; //name of region for multi-region cases
        enabled             yes; //on/off switch
        //timeStart           0; //start time
        //timeEnd             10; //end time
        outputControl       timeStep; //when to output: either 'outputTime' or 'timeStep'
        outputInterval      1; //steps between output when outputControl=timeStep

        write no; //write min/max data to file
        log yes; //write min/max data to standard output
        mode magnitude; //magnitude or component

        fields
        (
            
            T
            U
        );
    }

    volumeTemperature
    {
        type            cellSource;
        functionObjectLibs ("libfieldFunctionObjects.so");
        //region              defaultRegion; //name of region for multi-region cases
        enabled             yes; //on/off switch
        //timeStart           0; //start time
        //timeEnd             10; //end time
        outputControl       timeStep; //when to output: either 'outputTime' or 'timeStep'
        outputInterval      1; //steps between output when outputControl=timeStep

        log             yes;  //write data to standard output
        valueOutput     no; //write the raw output values
        source          all; //all cellZone;
        //sourceName      c0;
        operation       average; //volAverage weightedAverage
        //weightField     alpha1;
        fields
        (
            T
        );
    }

    faceTemperature
    {
        type            faceSource;
        functionObjectLibs ("libfieldFunctionObjects.so");
        //region              defaultRegion; //name of region for multi-region cases
        enabled             yes; //on/off switch
        //timeStart           0; //start time
        //timeEnd             10; //end time
        outputControl       timeStep; //when to output: either 'outputTime' or 'timeStep'
        outputInterval      1; //steps between output when outputControl=timeStep

        log             yes;  //write data to standard output
        valueOutput     no; //write the raw output values
        surfaceFormat   none;
        source          patch; //faceZone patch sampledSurface;
        sourceName      outlet; //inlet outlet fixedWalls;
        operation       average; //areaAverage weightedAverage 
        //weightField     alpha1;
        fields
        (
            T
        );
    }

}

functions
{
    probes
    {
        // Where to load it from
        functionObjectLibs ( "libsampling.so" );

        type            probes;

        // Name of the directory for probe data
        name            probes;

        // Write at same frequency as fields
        outputControl   outputTime;
        outputInterval  1;

        // Fields to be probed
        fields
        (
            p U
        );

        probeLocations
        (
            ( 1e-06 0 0.01 )        // at inlet
            ( 0.21 -0.20999 0.01 )  // at outlet1
            ( 0.21 0.20999 0.01 )   // at outlet2
            ( 0.21 0 0.01 )         // at central block
        );
    }

    streamLines
    {
        type            streamLine;
        outputControl   outputTime;
        setFormat       vtk;
        UName           U;
        trackForward    true;
        fields          (p U);
        lifeTime        10000;
        nSubCycle       5;
        cloudName       particleTracks;
        seedSampleSet   uniform;
        uniformCoeffs
        {
            type            uniform;
            axis            x;
            start           (0 0.001 0);
            end             (2.989 0.001 0);
            nPoints         100;
        }
    }

    cuttingPlane
    {
        type            surfaces;
        functionObjectLibs ( "libsampling.so" );
        outputControl   outputTime;
        surfaceFormat   vtk;
        fields          ( p U );
        interpolationScheme cellPoint;
        surfaces
        (
            yNormal
            {
                type cuttingPlane;
                planeType pointAndNormal;
                pointAndNormalDict
                {
                    basePoint (0 0 0);
                    normalVector (0 0 1);
                }
                interpolate true;
            }
        );
    }

    wallPressure
    {
        type            surfaces;
        functionObjectLibs ("libsampling.so");
        outputControl   outputTime;
        surfaceFormat   raw;
        fields
        (
            p
        );
        interpolationScheme cellPoint;

        surfaces
        (
            walls
            {
                type        patch;
                patches     (walls);
                triangulate false;
            }
        );
    }

}

