#include "fvCFD.H"
#include "singlePhaseTransportModel.H"
#include "RASModel.H"
#include "simpleControl.H"
#include "fvIOoptionList.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

int main(int argc, char *argv[])
{
    #include "setRootCase.H"
    #include "createTime.H"
    #include "createMesh.H"
    #include "createFields.H"
    #include "createFvOptions.H"
    #include "initContinuityErrs.H"

    simpleControl simple(mesh);

    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

    Info<< "\nStarting time loop\n" << endl;

    while (simple.loop())
    {
        Info<< "Time = " << runTime.timeName() << nl << endl;

        // --- Pressure-velocity SIMPLE corrector
        {

	    // #include "UEqn.H" - Momentum predictor
	       /* The momentum equation is solved first. The exact pressure gradient source
		  term is not known at this stage â€“ the pressure field from the previous time-step
		  is used instead. This stage is called the momentum predictor. The solution
		  of the momentum equation gives an approximation of the new velocity field. 
               */
		{    
                    // 2. Solve the discretized momentum equation to compute the intermediate velocity field.
                    tmp<fvVectorMatrix> UEqn // Define the equation for U.
		    (
			fvm::div(phi, U)
		      + turbulence->divDevReff(U)
		      ==
			fvOptions(U)
		    );
		    UEqn().relax(); // Under-relax the equation for U. 
		    fvOptions.constrain(UEqn());
		    solve(UEqn() == -fvc::grad(p)); // Solve using previous p.
		    fvOptions.correct(U);
                }


            // #include "pEqn.H"
		{
		    volScalarField rAU(1.0/UEqn().A());
		    volVectorField HbyA("HbyA", U); //HbyA represents intermediate U.
		    HbyA = rAU*UEqn().H();
		    UEqn.clear();

                    // 3. Compute the mass fluxes at the cells faces. 
		    surfaceScalarField phiHbyA("phiHbyA", fvc::interpolate(HbyA) & mesh.Sf());
		    fvOptions.makeRelative(phiHbyA);
		    adjustPhi(phiHbyA, U, p);

		    // Define and solve the pressure equation using the predicted velocities and repeat 
                    // for the prescribed number of non-orthogonal corrector steps
		    while (simple.correctNonOrthogonal())
		    {
                        // 4. Solve the pressure equation 
			fvScalarMatrix pEqn
			(
			    fvm::laplacian(rAU, p) == fvc::div(phiHbyA)
			);
			pEqn.setReference(pRefCell, pRefValue);
			pEqn.solve();
                        
                        // 5. Correct the mass fluxes at the cell faces. 
			if (simple.finalNonOrthogonalIter())
			{
			    phi = phiHbyA - pEqn.flux();
			}
		    }

                    // Calculate continuity errors
		    #include "continuityErrs.H"

		    // Explicitly under-relax the pressure for momentum corrector
		    p.relax();

                    // 6. Correct the velocities on the basis of the new pressure field.   
		    U = HbyA - rAU*fvc::grad(p);

                    // 7. Update the boundary conditions. 
		    U.correctBoundaryConditions();
		    fvOptions.correct(U);
		}


        }

        turbulence->correct();

        runTime.write();

        Info<< "ExecutionTime = " << runTime.elapsedCpuTime() << " s"
            << "  ClockTime = " << runTime.elapsedClockTime() << " s"
            << nl << endl;
    }

    Info<< "End\n" << endl;

    return 0;
}


// ************************************************************************* //
