/* ------------------- simpleFoam source code */

#include "fvCFD.H"
#include "singlePhaseTransportModel.H"
#include "RASModel.H"
#include "simpleControl.H"
#include "fvIOoptionList.H"

// * * * * * * * * * * * * * * * * *  * * * * //

int main(int argc, char *argv[])
{   
    // 1. Pre-processing
    #include "setRootCase.H"
    #include "createTime.H"
    #include "createMesh.H"
    #include "createFields.H"
    #include "createFvOptions.H"
    #include "initContinuityErrs.H"

    simpleControl simple(mesh);

    // * * * * * * * * * * * * * * * * *  * * * * //

    Info<< "\nStarting time loop\n" << endl;

    // SIMPLE loop
    while (simple.loop())
    {
        Info<< "Time = " << runTime.timeName() << nl << endl;

        {
	        // 2. Momentum Predictor
	        /* The momentum equation is solved first. 
                   The exact pressure gradient source term is 
                   not known at this stage the pressure field 
                   from the previous time-step is used instead. 
                   This stage is called the momentum predictor. 
                   The solution of the momentum equation gives 
                   an approximation of the new velocity field. 
                */
                // #include "uEqn.H"
		{    
                    /* Solve the discretized momentum equation 
                       to compute the intermediate velocity field. */

                    // Define the equation for U.
                    tmp<fvVectorMatrix> UEqn 
		    (
			fvm::div(phi, U)
		      + turbulence->divDevReff(U)
		      ==
			fvOptions(U)
		    );

                    // Under-relax the equation for U.
		    UEqn().relax();  
		    fvOptions.constrain(UEqn());
                    
                    // Solve using previous p.
		    solve(UEqn() == -fvc::grad(p)); 
		    fvOptions.correct(U);
                }


                // #include "pEqn.H"
		{
		    volScalarField rAU(1.0/UEqn().A());
		    volVectorField HbyA("HbyA", U); 
		    HbyA = rAU*UEqn().H();
		    UEqn.clear();

                    // 3. Compute the mass fluxes at the cell faces. 
		    surfaceScalarField phiHbyA("phiHbyA", fvc::interpolate(HbyA) & mesh.Sf());
		    fvOptions.makeRelative(phiHbyA);
		    adjustPhi(phiHbyA, U, p);

		    
                    /* Define and solve the pressure equation using the 
                       predicted velocities and repeat for the prescribed 
                       number of non-orthogonal corrector steps. */
		    while (simple.correctNonOrthogonal())
		    {
                        // 4. Pressure Correction 
			fvScalarMatrix pEqn
			(
			    fvm::laplacian(rAU, p) == fvc::div(phiHbyA)
			);
			pEqn.setReference(pRefCell, pRefValue);
			pEqn.solve();
                        
                        // 5. Correct the mass fluxes at the cell faces. 
			if (simple.finalNonOrthogonalIter())
			{
			    phi = phiHbyA - pEqn.flux();
			}
		    }

                    // Calculate continuity errors
		    #include "continuityErrs.H"

                    /* 6. Correct the velocities on the basis of 
                       the new pressure field. */
                    // Explicitly under-relax the pressure for 
                    // momentum corrector.
                    p.relax(); 
		    U = HbyA - rAU*fvc::grad(p);

                    // 7. Update the boundary conditions. 
		    U.correctBoundaryConditions();
		    fvOptions.correct(U);
		}


        }
        // 8. Correct for turbulence.
        turbulence->correct();

        runTime.write();

        Info<< "ExecutionTime = " << runTime.elapsedCpuTime() << " s"
            << "  ClockTime = " << runTime.elapsedClockTime() << " s"
            << nl << endl;
    }

    Info<< "End\n" << endl;

    return 0;
}


// ************************************************************************* //
